// AUTOGENERATED FILE. DO NOT EDIT IT

// template composite.go

package ai

import (
  "game/pidgeot-socket/ecs"
)

type MemSequence struct {
  Status Status
  Children []Behavior

  World *ecs.Manager
  Eid ecs.EID
  Index int
}

func NewMemSequence(eid ecs.EID, world *ecs.Manager, children ...Behavior) *MemSequence {
  return &MemSequence{
    Eid: eid,
    World: world,

    Children: children,
    Index: 0,
  }
}

func (n *MemSequence) Update() Status {
	if n.IsEmpty() { return SUCCESS }

	for i := n.Index; i < len(n.Children); i++ {
    child := n.Children[i]

		status := child.Tick()
		if status != SUCCESS { return status }
	}

	return SUCCESS
}



func (n *MemSequence) Initialize() { }
func (n *MemSequence) Terminate(status Status) { }

func (n *MemSequence) IsSuccess() bool { return n.Status == SUCCESS }
func (n *MemSequence) IsFailure() bool { return n.Status == FAILURE }
func (n *MemSequence) IsRunning() bool { return n.Status == RUNNING }
func (n *MemSequence) IsTerminated() bool { return n.Status == SUCCESS || n.Status == FAILURE }

func (n *MemSequence) Reset() { n.Status = INVALID }

func (n *MemSequence) Tick() Status {
  if n.Status != RUNNING { n.Initialize() }
  status := n.Update()
  if n.Status != RUNNING { n.Terminate(status) }

  return status
}

// COMPOSITE SECTION
func (n *MemSequence) IsEmpty() bool {
  return len(n.Children) == 0
}

func (n *MemSequence) AddChildren(children ...Behavior) {
  n.Children = append(n.Children, children...)
}
