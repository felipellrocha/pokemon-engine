// AUTOGENERATED FILE. DO NOT EDIT IT

// template decorator.go

package ai

import (
  _"fmt"
)

type Repeater struct {
  Status Status

  Child Behavior
}

func NewRepeater(child Behavior) *Repeater {
  return &Repeater{
    Child: child,
  }
}

func (n *Repeater) Update() Status {
  status := n.Child.Tick()

  if status == SUCCESS { return FAILURE } else if status == FAILURE { return SUCCESS }

  return status
}


func (n *Repeater) Initialize() { }
func (n *Repeater) Terminate(status Status) { }

func (n *Repeater) IsSuccess() bool { return n.Status == SUCCESS }
func (n *Repeater) IsFailure() bool { return n.Status == FAILURE }
func (n *Repeater) IsRunning() bool { return n.Status == RUNNING }
func (n *Repeater) IsTerminated() bool { return n.Status == SUCCESS || n.Status == FAILURE }

func (n *Repeater) Reset() { n.Status = INVALID }

func (n *Repeater) Tick() Status {
  if n.Status != RUNNING { n.Initialize() }
  status := n.Update()
  if n.Status != RUNNING { n.Terminate(status) }

  return status
}

// DECORATOR SECTION
func (n *Repeater) HasNoChild() bool {
  return n.Child == nil
}

func (n *Repeater) AddChild(child Behavior) {
  n.Child = child
}
